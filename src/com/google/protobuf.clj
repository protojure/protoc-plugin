;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package com.google.protobuf
;;;----------------------------------------------------------------------------------
(ns com.google.protobuf
  (:require [protojure.protobuf :as pb]
            [protojure.protobuf.serdes :refer :all]
            [clojure.set :as set]
            [clojure.spec.alpha :as s])
  (:import (com.google.protobuf
            CodedInputStream)))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->ServiceDescriptorProto)
(declare ecis->ServiceDescriptorProto)
(declare new-ServiceDescriptorProto)
(declare cis->DescriptorProto-ExtensionRange)
(declare ecis->DescriptorProto-ExtensionRange)
(declare new-DescriptorProto-ExtensionRange)
(declare cis->UninterpretedOption-NamePart)
(declare ecis->UninterpretedOption-NamePart)
(declare new-UninterpretedOption-NamePart)
(declare cis->FileDescriptorSet)
(declare ecis->FileDescriptorSet)
(declare new-FileDescriptorSet)
(declare cis->GeneratedCodeInfo-Annotation)
(declare ecis->GeneratedCodeInfo-Annotation)
(declare new-GeneratedCodeInfo-Annotation)
(declare cis->MethodOptions)
(declare ecis->MethodOptions)
(declare new-MethodOptions)
(declare cis->EnumDescriptorProto-EnumReservedRange)
(declare ecis->EnumDescriptorProto-EnumReservedRange)
(declare new-EnumDescriptorProto-EnumReservedRange)
(declare cis->EnumValueDescriptorProto)
(declare ecis->EnumValueDescriptorProto)
(declare new-EnumValueDescriptorProto)
(declare cis->SourceCodeInfo-Location)
(declare ecis->SourceCodeInfo-Location)
(declare new-SourceCodeInfo-Location)
(declare cis->FieldOptions)
(declare ecis->FieldOptions)
(declare new-FieldOptions)
(declare cis->EnumOptions)
(declare ecis->EnumOptions)
(declare new-EnumOptions)
(declare cis->MessageOptions)
(declare ecis->MessageOptions)
(declare new-MessageOptions)
(declare cis->EnumDescriptorProto)
(declare ecis->EnumDescriptorProto)
(declare new-EnumDescriptorProto)
(declare cis->UninterpretedOption)
(declare ecis->UninterpretedOption)
(declare new-UninterpretedOption)
(declare cis->ExtensionRangeOptions)
(declare ecis->ExtensionRangeOptions)
(declare new-ExtensionRangeOptions)
(declare cis->DescriptorProto)
(declare ecis->DescriptorProto)
(declare new-DescriptorProto)
(declare cis->OneofOptions)
(declare ecis->OneofOptions)
(declare new-OneofOptions)
(declare cis->MethodDescriptorProto)
(declare ecis->MethodDescriptorProto)
(declare new-MethodDescriptorProto)
(declare cis->OneofDescriptorProto)
(declare ecis->OneofDescriptorProto)
(declare new-OneofDescriptorProto)
(declare cis->FileDescriptorProto)
(declare ecis->FileDescriptorProto)
(declare new-FileDescriptorProto)
(declare cis->DescriptorProto-ReservedRange)
(declare ecis->DescriptorProto-ReservedRange)
(declare new-DescriptorProto-ReservedRange)
(declare cis->EnumValueOptions)
(declare ecis->EnumValueOptions)
(declare new-EnumValueOptions)
(declare cis->FieldDescriptorProto)
(declare ecis->FieldDescriptorProto)
(declare new-FieldDescriptorProto)
(declare cis->GeneratedCodeInfo)
(declare ecis->GeneratedCodeInfo)
(declare new-GeneratedCodeInfo)
(declare cis->FileOptions)
(declare ecis->FileOptions)
(declare new-FileOptions)
(declare cis->SourceCodeInfo)
(declare ecis->SourceCodeInfo)
(declare new-SourceCodeInfo)
(declare cis->ServiceOptions)
(declare ecis->ServiceOptions)
(declare new-ServiceOptions)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Enumerations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; FieldDescriptorProto-Type
;-----------------------------------------------------------------------------
(def FieldDescriptorProto-Type-val2label {9 :type-string
                                          3 :type-int64
                                          4 :type-uint64
                                          8 :type-bool
                                          14 :type-enum
                                          17 :type-sint32
                                          15 :type-sfixed32
                                          7 :type-fixed32
                                          5 :type-int32
                                          18 :type-sint64
                                          12 :type-bytes
                                          13 :type-uint32
                                          6 :type-fixed64
                                          1 :type-double
                                          11 :type-message
                                          2 :type-float
                                          16 :type-sfixed64
                                          10 :type-group})

(def FieldDescriptorProto-Type-label2val (set/map-invert FieldDescriptorProto-Type-val2label))

(defn cis->FieldDescriptorProto-Type [is]
  (let [val (.readEnum is)]
    (get FieldDescriptorProto-Type-val2label val val)))

(defn- get-FieldDescriptorProto-Type [value]
  {:pre [(or (int? value) (contains? FieldDescriptorProto-Type-label2val value))]}
  (get FieldDescriptorProto-Type-label2val value value))

(defn size-FieldDescriptorProto-Type [tag options value]
  (size-Enum tag options (get-FieldDescriptorProto-Type value)))

(defn write-FieldDescriptorProto-Type [tag options value os]
  (write-Enum tag options (get-FieldDescriptorProto-Type value) os))

;-----------------------------------------------------------------------------
; FieldDescriptorProto-Label
;-----------------------------------------------------------------------------
(def FieldDescriptorProto-Label-val2label {1 :label-optional
                                           2 :label-required
                                           3 :label-repeated})

(def FieldDescriptorProto-Label-label2val (set/map-invert FieldDescriptorProto-Label-val2label))

(defn cis->FieldDescriptorProto-Label [is]
  (let [val (.readEnum is)]
    (get FieldDescriptorProto-Label-val2label val val)))

(defn- get-FieldDescriptorProto-Label [value]
  {:pre [(or (int? value) (contains? FieldDescriptorProto-Label-label2val value))]}
  (get FieldDescriptorProto-Label-label2val value value))

(defn size-FieldDescriptorProto-Label [tag options value]
  (size-Enum tag options (get-FieldDescriptorProto-Label value)))

(defn write-FieldDescriptorProto-Label [tag options value os]
  (write-Enum tag options (get-FieldDescriptorProto-Label value) os))

;-----------------------------------------------------------------------------
; FileOptions-OptimizeMode
;-----------------------------------------------------------------------------
(def FileOptions-OptimizeMode-val2label {1 :speed
                                         2 :code-size
                                         3 :lite-runtime})

(def FileOptions-OptimizeMode-label2val (set/map-invert FileOptions-OptimizeMode-val2label))

(defn cis->FileOptions-OptimizeMode [is]
  (let [val (.readEnum is)]
    (get FileOptions-OptimizeMode-val2label val val)))

(defn- get-FileOptions-OptimizeMode [value]
  {:pre [(or (int? value) (contains? FileOptions-OptimizeMode-label2val value))]}
  (get FileOptions-OptimizeMode-label2val value value))

(defn size-FileOptions-OptimizeMode [tag options value]
  (size-Enum tag options (get-FileOptions-OptimizeMode value)))

(defn write-FileOptions-OptimizeMode [tag options value os]
  (write-Enum tag options (get-FileOptions-OptimizeMode value) os))

;-----------------------------------------------------------------------------
; FieldOptions-CType
;-----------------------------------------------------------------------------
(def FieldOptions-CType-val2label {0 :string
                                   1 :cord
                                   2 :string-piece})

(def FieldOptions-CType-label2val (set/map-invert FieldOptions-CType-val2label))

(defn cis->FieldOptions-CType [is]
  (let [val (.readEnum is)]
    (get FieldOptions-CType-val2label val val)))

(defn- get-FieldOptions-CType [value]
  {:pre [(or (int? value) (contains? FieldOptions-CType-label2val value))]}
  (get FieldOptions-CType-label2val value value))

(defn size-FieldOptions-CType [tag options value]
  (size-Enum tag options (get-FieldOptions-CType value)))

(defn write-FieldOptions-CType [tag options value os]
  (write-Enum tag options (get-FieldOptions-CType value) os))

;-----------------------------------------------------------------------------
; FieldOptions-JSType
;-----------------------------------------------------------------------------
(def FieldOptions-JSType-val2label {0 :js-normal
                                    1 :js-string
                                    2 :js-number})

(def FieldOptions-JSType-label2val (set/map-invert FieldOptions-JSType-val2label))

(defn cis->FieldOptions-JSType [is]
  (let [val (.readEnum is)]
    (get FieldOptions-JSType-val2label val val)))

(defn- get-FieldOptions-JSType [value]
  {:pre [(or (int? value) (contains? FieldOptions-JSType-label2val value))]}
  (get FieldOptions-JSType-label2val value value))

(defn size-FieldOptions-JSType [tag options value]
  (size-Enum tag options (get-FieldOptions-JSType value)))

(defn write-FieldOptions-JSType [tag options value os]
  (write-Enum tag options (get-FieldOptions-JSType value) os))

;-----------------------------------------------------------------------------
; MethodOptions-IdempotencyLevel
;-----------------------------------------------------------------------------
(def MethodOptions-IdempotencyLevel-val2label {0 :idempotency-unknown
                                               1 :no-side-effects
                                               2 :idempotent})

(def MethodOptions-IdempotencyLevel-label2val (set/map-invert MethodOptions-IdempotencyLevel-val2label))

(defn cis->MethodOptions-IdempotencyLevel [is]
  (let [val (.readEnum is)]
    (get MethodOptions-IdempotencyLevel-val2label val val)))

(defn- get-MethodOptions-IdempotencyLevel [value]
  {:pre [(or (int? value) (contains? MethodOptions-IdempotencyLevel-label2val value))]}
  (get MethodOptions-IdempotencyLevel-label2val value value))

(defn size-MethodOptions-IdempotencyLevel [tag options value]
  (size-Enum tag options (get-MethodOptions-IdempotencyLevel value)))

(defn write-MethodOptions-IdempotencyLevel [tag options value os]
  (write-Enum tag options (get-MethodOptions-IdempotencyLevel value) os))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; ServiceDescriptorProto
;-----------------------------------------------------------------------------
(defrecord ServiceDescriptorProto [name method options]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-repeated write-embedded 2 (:method this) os)
    (write-embedded 3 (:options this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name this))
               (size-repeated size-embedded 2 (:method this))
               (size-embedded 3 (:options this))])))

(s/def :com.google.protobuf.messages.ServiceDescriptorProto/name string?)

(s/def ::ServiceDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.ServiceDescriptorProto/name]))
(def ServiceDescriptorProto-defaults {:name "" :method []})

(defn cis->ServiceDescriptorProto
  "CodedInputStream to ServiceDescriptorProto"
  [is]
  (->> (tag-map ServiceDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:method (cis->repeated ecis->MethodDescriptorProto is)]
                    3 [:options (ecis->ServiceOptions is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->ServiceDescriptorProto)))

(defn ecis->ServiceDescriptorProto
  "Embedded CodedInputStream to ServiceDescriptorProto"
  [is]
  (cis->embedded cis->ServiceDescriptorProto is))

(defn new-ServiceDescriptorProto
  "Creates a new instance from a map, similar to map->ServiceDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ServiceDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ServiceDescriptorProto-spec init))))]}
  (-> (merge ServiceDescriptorProto-defaults init)
      (cond-> (contains? init :method) (update :method #(map new-MethodDescriptorProto %)))
      (cond-> (contains? init :options) (update :options new-ServiceOptions))
      (map->ServiceDescriptorProto)))

(defn pb->ServiceDescriptorProto
  "Protobuf to ServiceDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->ServiceDescriptorProto))

;-----------------------------------------------------------------------------
; DescriptorProto-ExtensionRange
;-----------------------------------------------------------------------------
(defrecord DescriptorProto-ExtensionRange [start end options]
  pb/Writer

  (serialize [this os]
    (write-Int32 1  {:optimize true} (:start this) os)
    (write-Int32 2  {:optimize true} (:end this) os)
    (write-embedded 3 (:options this) os))

  (length [this]
    (reduce + [(size-Int32 1  {:optimize true} (:start this))
               (size-Int32 2  {:optimize true} (:end this))
               (size-embedded 3 (:options this))])))

(s/def :com.google.protobuf.messages.DescriptorProto-ExtensionRange/start int?)
(s/def :com.google.protobuf.messages.DescriptorProto-ExtensionRange/end int?)

(s/def ::DescriptorProto-ExtensionRange-spec (s/keys :opt-un [:com.google.protobuf.messages.DescriptorProto-ExtensionRange/start :com.google.protobuf.messages.DescriptorProto-ExtensionRange/end]))
(def DescriptorProto-ExtensionRange-defaults {:start 0 :end 0})

(defn cis->DescriptorProto-ExtensionRange
  "CodedInputStream to DescriptorProto-ExtensionRange"
  [is]
  (->> (tag-map DescriptorProto-ExtensionRange-defaults
                (fn [tag index]
                  (case index
                    1 [:start (cis->Int32 is)]
                    2 [:end (cis->Int32 is)]
                    3 [:options (ecis->ExtensionRangeOptions is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->DescriptorProto-ExtensionRange)))

(defn ecis->DescriptorProto-ExtensionRange
  "Embedded CodedInputStream to DescriptorProto-ExtensionRange"
  [is]
  (cis->embedded cis->DescriptorProto-ExtensionRange is))

(defn new-DescriptorProto-ExtensionRange
  "Creates a new instance from a map, similar to map->DescriptorProto-ExtensionRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-ExtensionRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-ExtensionRange-spec init))))]}
  (-> (merge DescriptorProto-ExtensionRange-defaults init)
      (cond-> (contains? init :options) (update :options new-ExtensionRangeOptions))
      (map->DescriptorProto-ExtensionRange)))

(defn pb->DescriptorProto-ExtensionRange
  "Protobuf to DescriptorProto-ExtensionRange"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->DescriptorProto-ExtensionRange))

;-----------------------------------------------------------------------------
; UninterpretedOption-NamePart
;-----------------------------------------------------------------------------
(defrecord UninterpretedOption-NamePart [name-part is-extension]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name-part this) os)
    (write-Bool 2  {:optimize true} (:is-extension this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name-part this))
               (size-Bool 2  {:optimize true} (:is-extension this))])))

(s/def :com.google.protobuf.messages.UninterpretedOption-NamePart/name-part string?)
(s/def :com.google.protobuf.messages.UninterpretedOption-NamePart/is-extension boolean?)
(s/def ::UninterpretedOption-NamePart-spec (s/keys :opt-un [:com.google.protobuf.messages.UninterpretedOption-NamePart/name-part :com.google.protobuf.messages.UninterpretedOption-NamePart/is-extension]))
(def UninterpretedOption-NamePart-defaults {:name-part "" :is-extension false})

(defn cis->UninterpretedOption-NamePart
  "CodedInputStream to UninterpretedOption-NamePart"
  [is]
  (->> (tag-map UninterpretedOption-NamePart-defaults
                (fn [tag index]
                  (case index
                    1 [:name-part (cis->String is)]
                    2 [:is-extension (cis->Bool is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->UninterpretedOption-NamePart)))

(defn ecis->UninterpretedOption-NamePart
  "Embedded CodedInputStream to UninterpretedOption-NamePart"
  [is]
  (cis->embedded cis->UninterpretedOption-NamePart is))

(defn new-UninterpretedOption-NamePart
  "Creates a new instance from a map, similar to map->UninterpretedOption-NamePart except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UninterpretedOption-NamePart-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UninterpretedOption-NamePart-spec init))))]}
  (-> (merge UninterpretedOption-NamePart-defaults init)
      (map->UninterpretedOption-NamePart)))

(defn pb->UninterpretedOption-NamePart
  "Protobuf to UninterpretedOption-NamePart"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->UninterpretedOption-NamePart))

;-----------------------------------------------------------------------------
; FileDescriptorSet
;-----------------------------------------------------------------------------
(defrecord FileDescriptorSet [file]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 1 (:file this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 1 (:file this))])))

(s/def ::FileDescriptorSet-spec (s/keys :opt-un []))
(def FileDescriptorSet-defaults {:file []})

(defn cis->FileDescriptorSet
  "CodedInputStream to FileDescriptorSet"
  [is]
  (->> (tag-map FileDescriptorSet-defaults
                (fn [tag index]
                  (case index
                    1 [:file (cis->repeated ecis->FileDescriptorProto is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->FileDescriptorSet)))

(defn ecis->FileDescriptorSet
  "Embedded CodedInputStream to FileDescriptorSet"
  [is]
  (cis->embedded cis->FileDescriptorSet is))

(defn new-FileDescriptorSet
  "Creates a new instance from a map, similar to map->FileDescriptorSet except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileDescriptorSet-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileDescriptorSet-spec init))))]}
  (-> (merge FileDescriptorSet-defaults init)
      (cond-> (contains? init :file) (update :file #(map new-FileDescriptorProto %)))
      (map->FileDescriptorSet)))

(defn pb->FileDescriptorSet
  "Protobuf to FileDescriptorSet"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->FileDescriptorSet))

;-----------------------------------------------------------------------------
; GeneratedCodeInfo-Annotation
;-----------------------------------------------------------------------------
(defrecord GeneratedCodeInfo-Annotation [path source-file begin end]
  pb/Writer

  (serialize [this os]
    (write-repeated write-Int32 1 (:path this) os)
    (write-String 2  {:optimize true} (:source-file this) os)
    (write-Int32 3  {:optimize true} (:begin this) os)
    (write-Int32 4  {:optimize true} (:end this) os))

  (length [this]
    (reduce + [(size-repeated size-Int32 1 (:path this))
               (size-String 2  {:optimize true} (:source-file this))
               (size-Int32 3  {:optimize true} (:begin this))
               (size-Int32 4  {:optimize true} (:end this))])))

(s/def :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/path (s/every int?))
(s/def :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/source-file string?)
(s/def :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/begin int?)
(s/def :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/end int?)
(s/def ::GeneratedCodeInfo-Annotation-spec (s/keys :opt-un [:com.google.protobuf.messages.GeneratedCodeInfo-Annotation/path :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/source-file :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/begin :com.google.protobuf.messages.GeneratedCodeInfo-Annotation/end]))
(def GeneratedCodeInfo-Annotation-defaults {:path [] :source-file "" :begin 0 :end 0})

(defn cis->GeneratedCodeInfo-Annotation
  "CodedInputStream to GeneratedCodeInfo-Annotation"
  [is]
  (->> (tag-map GeneratedCodeInfo-Annotation-defaults
                (fn [tag index]
                  (case index
                    1 [:path (cis->packablerepeated tag cis->Int32 is)]
                    2 [:source-file (cis->String is)]
                    3 [:begin (cis->Int32 is)]
                    4 [:end (cis->Int32 is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->GeneratedCodeInfo-Annotation)))

(defn ecis->GeneratedCodeInfo-Annotation
  "Embedded CodedInputStream to GeneratedCodeInfo-Annotation"
  [is]
  (cis->embedded cis->GeneratedCodeInfo-Annotation is))

(defn new-GeneratedCodeInfo-Annotation
  "Creates a new instance from a map, similar to map->GeneratedCodeInfo-Annotation except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GeneratedCodeInfo-Annotation-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GeneratedCodeInfo-Annotation-spec init))))]}
  (-> (merge GeneratedCodeInfo-Annotation-defaults init)
      (map->GeneratedCodeInfo-Annotation)))

(defn pb->GeneratedCodeInfo-Annotation
  "Protobuf to GeneratedCodeInfo-Annotation"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->GeneratedCodeInfo-Annotation))

;-----------------------------------------------------------------------------
; MethodOptions
;-----------------------------------------------------------------------------
(defrecord MethodOptions [deprecated idempotency-level uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-Bool 33  {:optimize true} (:deprecated this) os)
    (write-MethodOptions-IdempotencyLevel 34  {:optimize true} (:idempotency-level this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-Bool 33  {:optimize true} (:deprecated this))
               (size-MethodOptions-IdempotencyLevel 34  {:optimize true} (:idempotency-level this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.MethodOptions/deprecated boolean?)
(s/def :com.google.protobuf.messages.MethodOptions/idempotency-level (s/or :keyword keyword? :int int?))

(s/def ::MethodOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.MethodOptions/deprecated :com.google.protobuf.messages.MethodOptions/idempotency-level]))
(def MethodOptions-defaults {:deprecated false :idempotency-level (MethodOptions-IdempotencyLevel-val2label 0) :uninterpreted-option []})

(defn cis->MethodOptions
  "CodedInputStream to MethodOptions"
  [is]
  (->> (tag-map MethodOptions-defaults
                (fn [tag index]
                  (case index
                    33 [:deprecated (cis->Bool is)]
                    34 [:idempotency-level (cis->MethodOptions-IdempotencyLevel is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->MethodOptions)))

(defn ecis->MethodOptions
  "Embedded CodedInputStream to MethodOptions"
  [is]
  (cis->embedded cis->MethodOptions is))

(defn new-MethodOptions
  "Creates a new instance from a map, similar to map->MethodOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MethodOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MethodOptions-spec init))))]}
  (-> (merge MethodOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->MethodOptions)))

(defn pb->MethodOptions
  "Protobuf to MethodOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->MethodOptions))

;-----------------------------------------------------------------------------
; EnumDescriptorProto-EnumReservedRange
;-----------------------------------------------------------------------------
(defrecord EnumDescriptorProto-EnumReservedRange [start end]
  pb/Writer

  (serialize [this os]
    (write-Int32 1  {:optimize true} (:start this) os)
    (write-Int32 2  {:optimize true} (:end this) os))

  (length [this]
    (reduce + [(size-Int32 1  {:optimize true} (:start this))
               (size-Int32 2  {:optimize true} (:end this))])))

(s/def :com.google.protobuf.messages.EnumDescriptorProto-EnumReservedRange/start int?)
(s/def :com.google.protobuf.messages.EnumDescriptorProto-EnumReservedRange/end int?)
(s/def ::EnumDescriptorProto-EnumReservedRange-spec (s/keys :opt-un [:com.google.protobuf.messages.EnumDescriptorProto-EnumReservedRange/start :com.google.protobuf.messages.EnumDescriptorProto-EnumReservedRange/end]))
(def EnumDescriptorProto-EnumReservedRange-defaults {:start 0 :end 0})

(defn cis->EnumDescriptorProto-EnumReservedRange
  "CodedInputStream to EnumDescriptorProto-EnumReservedRange"
  [is]
  (->> (tag-map EnumDescriptorProto-EnumReservedRange-defaults
                (fn [tag index]
                  (case index
                    1 [:start (cis->Int32 is)]
                    2 [:end (cis->Int32 is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->EnumDescriptorProto-EnumReservedRange)))

(defn ecis->EnumDescriptorProto-EnumReservedRange
  "Embedded CodedInputStream to EnumDescriptorProto-EnumReservedRange"
  [is]
  (cis->embedded cis->EnumDescriptorProto-EnumReservedRange is))

(defn new-EnumDescriptorProto-EnumReservedRange
  "Creates a new instance from a map, similar to map->EnumDescriptorProto-EnumReservedRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumDescriptorProto-EnumReservedRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumDescriptorProto-EnumReservedRange-spec init))))]}
  (-> (merge EnumDescriptorProto-EnumReservedRange-defaults init)
      (map->EnumDescriptorProto-EnumReservedRange)))

(defn pb->EnumDescriptorProto-EnumReservedRange
  "Protobuf to EnumDescriptorProto-EnumReservedRange"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->EnumDescriptorProto-EnumReservedRange))

;-----------------------------------------------------------------------------
; EnumValueDescriptorProto
;-----------------------------------------------------------------------------
(defrecord EnumValueDescriptorProto [name number options]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-Int32 2  {:optimize true} (:number this) os)
    (write-embedded 3 (:options this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name this))
               (size-Int32 2  {:optimize true} (:number this))
               (size-embedded 3 (:options this))])))

(s/def :com.google.protobuf.messages.EnumValueDescriptorProto/name string?)
(s/def :com.google.protobuf.messages.EnumValueDescriptorProto/number int?)

(s/def ::EnumValueDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.EnumValueDescriptorProto/name :com.google.protobuf.messages.EnumValueDescriptorProto/number]))
(def EnumValueDescriptorProto-defaults {:name "" :number 0})

(defn cis->EnumValueDescriptorProto
  "CodedInputStream to EnumValueDescriptorProto"
  [is]
  (->> (tag-map EnumValueDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:number (cis->Int32 is)]
                    3 [:options (ecis->EnumValueOptions is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->EnumValueDescriptorProto)))

(defn ecis->EnumValueDescriptorProto
  "Embedded CodedInputStream to EnumValueDescriptorProto"
  [is]
  (cis->embedded cis->EnumValueDescriptorProto is))

(defn new-EnumValueDescriptorProto
  "Creates a new instance from a map, similar to map->EnumValueDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumValueDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumValueDescriptorProto-spec init))))]}
  (-> (merge EnumValueDescriptorProto-defaults init)
      (cond-> (contains? init :options) (update :options new-EnumValueOptions))
      (map->EnumValueDescriptorProto)))

(defn pb->EnumValueDescriptorProto
  "Protobuf to EnumValueDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->EnumValueDescriptorProto))

;-----------------------------------------------------------------------------
; SourceCodeInfo-Location
;-----------------------------------------------------------------------------
(defrecord SourceCodeInfo-Location [path span leading-comments trailing-comments leading-detached-comments]
  pb/Writer

  (serialize [this os]
    (write-repeated write-Int32 1 (:path this) os)
    (write-repeated write-Int32 2 (:span this) os)
    (write-String 3  {:optimize true} (:leading-comments this) os)
    (write-String 4  {:optimize true} (:trailing-comments this) os)
    (write-repeated write-String 6 (:leading-detached-comments this) os))

  (length [this]
    (reduce + [(size-repeated size-Int32 1 (:path this))
               (size-repeated size-Int32 2 (:span this))
               (size-String 3  {:optimize true} (:leading-comments this))
               (size-String 4  {:optimize true} (:trailing-comments this))
               (size-repeated size-String 6 (:leading-detached-comments this))])))

(s/def :com.google.protobuf.messages.SourceCodeInfo-Location/path (s/every int?))
(s/def :com.google.protobuf.messages.SourceCodeInfo-Location/span (s/every int?))
(s/def :com.google.protobuf.messages.SourceCodeInfo-Location/leading-comments string?)
(s/def :com.google.protobuf.messages.SourceCodeInfo-Location/trailing-comments string?)
(s/def :com.google.protobuf.messages.SourceCodeInfo-Location/leading-detached-comments (s/every string?))
(s/def ::SourceCodeInfo-Location-spec (s/keys :opt-un [:com.google.protobuf.messages.SourceCodeInfo-Location/path :com.google.protobuf.messages.SourceCodeInfo-Location/span :com.google.protobuf.messages.SourceCodeInfo-Location/leading-comments :com.google.protobuf.messages.SourceCodeInfo-Location/trailing-comments :com.google.protobuf.messages.SourceCodeInfo-Location/leading-detached-comments]))
(def SourceCodeInfo-Location-defaults {:path [] :span [] :leading-comments "" :trailing-comments "" :leading-detached-comments []})

(defn cis->SourceCodeInfo-Location
  "CodedInputStream to SourceCodeInfo-Location"
  [is]
  (->> (tag-map SourceCodeInfo-Location-defaults
                (fn [tag index]
                  (case index
                    1 [:path (cis->packablerepeated tag cis->Int32 is)]
                    2 [:span (cis->packablerepeated tag cis->Int32 is)]
                    3 [:leading-comments (cis->String is)]
                    4 [:trailing-comments (cis->String is)]
                    6 [:leading-detached-comments (cis->repeated cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->SourceCodeInfo-Location)))

(defn ecis->SourceCodeInfo-Location
  "Embedded CodedInputStream to SourceCodeInfo-Location"
  [is]
  (cis->embedded cis->SourceCodeInfo-Location is))

(defn new-SourceCodeInfo-Location
  "Creates a new instance from a map, similar to map->SourceCodeInfo-Location except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SourceCodeInfo-Location-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SourceCodeInfo-Location-spec init))))]}
  (-> (merge SourceCodeInfo-Location-defaults init)
      (map->SourceCodeInfo-Location)))

(defn pb->SourceCodeInfo-Location
  "Protobuf to SourceCodeInfo-Location"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->SourceCodeInfo-Location))

;-----------------------------------------------------------------------------
; FieldOptions
;-----------------------------------------------------------------------------
(defrecord FieldOptions [ctype packed jstype lazy deprecated weak uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-FieldOptions-CType 1  {:optimize true} (:ctype this) os)
    (write-Bool 2  {:optimize true} (:packed this) os)
    (write-FieldOptions-JSType 6  {:optimize true} (:jstype this) os)
    (write-Bool 5  {:optimize true} (:lazy this) os)
    (write-Bool 3  {:optimize true} (:deprecated this) os)
    (write-Bool 10  {:optimize true} (:weak this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-FieldOptions-CType 1  {:optimize true} (:ctype this))
               (size-Bool 2  {:optimize true} (:packed this))
               (size-FieldOptions-JSType 6  {:optimize true} (:jstype this))
               (size-Bool 5  {:optimize true} (:lazy this))
               (size-Bool 3  {:optimize true} (:deprecated this))
               (size-Bool 10  {:optimize true} (:weak this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.FieldOptions/ctype (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.messages.FieldOptions/packed boolean?)
(s/def :com.google.protobuf.messages.FieldOptions/jstype (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.messages.FieldOptions/lazy boolean?)
(s/def :com.google.protobuf.messages.FieldOptions/deprecated boolean?)
(s/def :com.google.protobuf.messages.FieldOptions/weak boolean?)

(s/def ::FieldOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.FieldOptions/ctype :com.google.protobuf.messages.FieldOptions/packed :com.google.protobuf.messages.FieldOptions/jstype :com.google.protobuf.messages.FieldOptions/lazy :com.google.protobuf.messages.FieldOptions/deprecated :com.google.protobuf.messages.FieldOptions/weak]))
(def FieldOptions-defaults {:ctype (FieldOptions-CType-val2label 0) :packed false :jstype (FieldOptions-JSType-val2label 0) :lazy false :deprecated false :weak false :uninterpreted-option []})

(defn cis->FieldOptions
  "CodedInputStream to FieldOptions"
  [is]
  (->> (tag-map FieldOptions-defaults
                (fn [tag index]
                  (case index
                    1 [:ctype (cis->FieldOptions-CType is)]
                    2 [:packed (cis->Bool is)]
                    6 [:jstype (cis->FieldOptions-JSType is)]
                    5 [:lazy (cis->Bool is)]
                    3 [:deprecated (cis->Bool is)]
                    10 [:weak (cis->Bool is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->FieldOptions)))

(defn ecis->FieldOptions
  "Embedded CodedInputStream to FieldOptions"
  [is]
  (cis->embedded cis->FieldOptions is))

(defn new-FieldOptions
  "Creates a new instance from a map, similar to map->FieldOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldOptions-spec init))))]}
  (-> (merge FieldOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->FieldOptions)))

(defn pb->FieldOptions
  "Protobuf to FieldOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->FieldOptions))

;-----------------------------------------------------------------------------
; EnumOptions
;-----------------------------------------------------------------------------
(defrecord EnumOptions [allow-alias deprecated uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-Bool 2  {:optimize true} (:allow-alias this) os)
    (write-Bool 3  {:optimize true} (:deprecated this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-Bool 2  {:optimize true} (:allow-alias this))
               (size-Bool 3  {:optimize true} (:deprecated this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.EnumOptions/allow-alias boolean?)
(s/def :com.google.protobuf.messages.EnumOptions/deprecated boolean?)

(s/def ::EnumOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.EnumOptions/allow-alias :com.google.protobuf.messages.EnumOptions/deprecated]))
(def EnumOptions-defaults {:allow-alias false :deprecated false :uninterpreted-option []})

(defn cis->EnumOptions
  "CodedInputStream to EnumOptions"
  [is]
  (->> (tag-map EnumOptions-defaults
                (fn [tag index]
                  (case index
                    2 [:allow-alias (cis->Bool is)]
                    3 [:deprecated (cis->Bool is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->EnumOptions)))

(defn ecis->EnumOptions
  "Embedded CodedInputStream to EnumOptions"
  [is]
  (cis->embedded cis->EnumOptions is))

(defn new-EnumOptions
  "Creates a new instance from a map, similar to map->EnumOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumOptions-spec init))))]}
  (-> (merge EnumOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->EnumOptions)))

(defn pb->EnumOptions
  "Protobuf to EnumOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->EnumOptions))

;-----------------------------------------------------------------------------
; MessageOptions
;-----------------------------------------------------------------------------
(defrecord MessageOptions [message-set-wire-format no-standard-descriptor-accessor deprecated map-entry uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-Bool 1  {:optimize true} (:message-set-wire-format this) os)
    (write-Bool 2  {:optimize true} (:no-standard-descriptor-accessor this) os)
    (write-Bool 3  {:optimize true} (:deprecated this) os)
    (write-Bool 7  {:optimize true} (:map-entry this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-Bool 1  {:optimize true} (:message-set-wire-format this))
               (size-Bool 2  {:optimize true} (:no-standard-descriptor-accessor this))
               (size-Bool 3  {:optimize true} (:deprecated this))
               (size-Bool 7  {:optimize true} (:map-entry this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.MessageOptions/message-set-wire-format boolean?)
(s/def :com.google.protobuf.messages.MessageOptions/no-standard-descriptor-accessor boolean?)
(s/def :com.google.protobuf.messages.MessageOptions/deprecated boolean?)
(s/def :com.google.protobuf.messages.MessageOptions/map-entry boolean?)

(s/def ::MessageOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.MessageOptions/message-set-wire-format :com.google.protobuf.messages.MessageOptions/no-standard-descriptor-accessor :com.google.protobuf.messages.MessageOptions/deprecated :com.google.protobuf.messages.MessageOptions/map-entry]))
(def MessageOptions-defaults {:message-set-wire-format false :no-standard-descriptor-accessor false :deprecated false :map-entry false :uninterpreted-option []})

(defn cis->MessageOptions
  "CodedInputStream to MessageOptions"
  [is]
  (->> (tag-map MessageOptions-defaults
                (fn [tag index]
                  (case index
                    1 [:message-set-wire-format (cis->Bool is)]
                    2 [:no-standard-descriptor-accessor (cis->Bool is)]
                    3 [:deprecated (cis->Bool is)]
                    7 [:map-entry (cis->Bool is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->MessageOptions)))

(defn ecis->MessageOptions
  "Embedded CodedInputStream to MessageOptions"
  [is]
  (cis->embedded cis->MessageOptions is))

(defn new-MessageOptions
  "Creates a new instance from a map, similar to map->MessageOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MessageOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MessageOptions-spec init))))]}
  (-> (merge MessageOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->MessageOptions)))

(defn pb->MessageOptions
  "Protobuf to MessageOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->MessageOptions))

;-----------------------------------------------------------------------------
; EnumDescriptorProto
;-----------------------------------------------------------------------------
(defrecord EnumDescriptorProto [name value options reserved-range reserved-name]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-repeated write-embedded 2 (:value this) os)
    (write-embedded 3 (:options this) os)
    (write-repeated write-embedded 4 (:reserved-range this) os)
    (write-repeated write-String 5 (:reserved-name this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name this))
               (size-repeated size-embedded 2 (:value this))
               (size-embedded 3 (:options this))
               (size-repeated size-embedded 4 (:reserved-range this))
               (size-repeated size-String 5 (:reserved-name this))])))

(s/def :com.google.protobuf.messages.EnumDescriptorProto/name string?)

(s/def :com.google.protobuf.messages.EnumDescriptorProto/reserved-name (s/every string?))
(s/def ::EnumDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.EnumDescriptorProto/name :com.google.protobuf.messages.EnumDescriptorProto/reserved-name]))
(def EnumDescriptorProto-defaults {:name "" :value [] :reserved-range [] :reserved-name []})

(defn cis->EnumDescriptorProto
  "CodedInputStream to EnumDescriptorProto"
  [is]
  (->> (tag-map EnumDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:value (cis->repeated ecis->EnumValueDescriptorProto is)]
                    3 [:options (ecis->EnumOptions is)]
                    4 [:reserved-range (cis->repeated ecis->EnumDescriptorProto-EnumReservedRange is)]
                    5 [:reserved-name (cis->repeated cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->EnumDescriptorProto)))

(defn ecis->EnumDescriptorProto
  "Embedded CodedInputStream to EnumDescriptorProto"
  [is]
  (cis->embedded cis->EnumDescriptorProto is))

(defn new-EnumDescriptorProto
  "Creates a new instance from a map, similar to map->EnumDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumDescriptorProto-spec init))))]}
  (-> (merge EnumDescriptorProto-defaults init)
      (cond-> (contains? init :value) (update :value #(map new-EnumValueDescriptorProto %)))
      (cond-> (contains? init :options) (update :options new-EnumOptions))
      (cond-> (contains? init :reserved-range) (update :reserved-range #(map new-EnumDescriptorProto-EnumReservedRange %)))
      (map->EnumDescriptorProto)))

(defn pb->EnumDescriptorProto
  "Protobuf to EnumDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->EnumDescriptorProto))

;-----------------------------------------------------------------------------
; UninterpretedOption
;-----------------------------------------------------------------------------
(defrecord UninterpretedOption [name identifier-value positive-int-value negative-int-value double-value string-value aggregate-value]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 2 (:name this) os)
    (write-String 3  {:optimize true} (:identifier-value this) os)
    (write-UInt64 4  {:optimize true} (:positive-int-value this) os)
    (write-Int64 5  {:optimize true} (:negative-int-value this) os)
    (write-Double 6  {:optimize true} (:double-value this) os)
    (write-Bytes 7  {:optimize true} (:string-value this) os)
    (write-String 8  {:optimize true} (:aggregate-value this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 2 (:name this))
               (size-String 3  {:optimize true} (:identifier-value this))
               (size-UInt64 4  {:optimize true} (:positive-int-value this))
               (size-Int64 5  {:optimize true} (:negative-int-value this))
               (size-Double 6  {:optimize true} (:double-value this))
               (size-Bytes 7  {:optimize true} (:string-value this))
               (size-String 8  {:optimize true} (:aggregate-value this))])))

(s/def :com.google.protobuf.messages.UninterpretedOption/identifier-value string?)
(s/def :com.google.protobuf.messages.UninterpretedOption/positive-int-value int?)
(s/def :com.google.protobuf.messages.UninterpretedOption/negative-int-value int?)
(s/def :com.google.protobuf.messages.UninterpretedOption/double-value float?)
(s/def :com.google.protobuf.messages.UninterpretedOption/string-value bytes?)
(s/def :com.google.protobuf.messages.UninterpretedOption/aggregate-value string?)
(s/def ::UninterpretedOption-spec (s/keys :opt-un [:com.google.protobuf.messages.UninterpretedOption/identifier-value :com.google.protobuf.messages.UninterpretedOption/positive-int-value :com.google.protobuf.messages.UninterpretedOption/negative-int-value :com.google.protobuf.messages.UninterpretedOption/double-value :com.google.protobuf.messages.UninterpretedOption/string-value :com.google.protobuf.messages.UninterpretedOption/aggregate-value]))
(def UninterpretedOption-defaults {:name [] :identifier-value "" :positive-int-value 0 :negative-int-value 0 :double-value 0.0 :string-value (byte-array 0) :aggregate-value ""})

(defn cis->UninterpretedOption
  "CodedInputStream to UninterpretedOption"
  [is]
  (->> (tag-map UninterpretedOption-defaults
                (fn [tag index]
                  (case index
                    2 [:name (cis->repeated ecis->UninterpretedOption-NamePart is)]
                    3 [:identifier-value (cis->String is)]
                    4 [:positive-int-value (cis->UInt64 is)]
                    5 [:negative-int-value (cis->Int64 is)]
                    6 [:double-value (cis->Double is)]
                    7 [:string-value (cis->Bytes is)]
                    8 [:aggregate-value (cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->UninterpretedOption)))

(defn ecis->UninterpretedOption
  "Embedded CodedInputStream to UninterpretedOption"
  [is]
  (cis->embedded cis->UninterpretedOption is))

(defn new-UninterpretedOption
  "Creates a new instance from a map, similar to map->UninterpretedOption except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::UninterpretedOption-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::UninterpretedOption-spec init))))]}
  (-> (merge UninterpretedOption-defaults init)
      (cond-> (contains? init :name) (update :name #(map new-UninterpretedOption-NamePart %)))
      (map->UninterpretedOption)))

(defn pb->UninterpretedOption
  "Protobuf to UninterpretedOption"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->UninterpretedOption))

;-----------------------------------------------------------------------------
; ExtensionRangeOptions
;-----------------------------------------------------------------------------
(defrecord ExtensionRangeOptions [uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def ::ExtensionRangeOptions-spec (s/keys :opt-un []))
(def ExtensionRangeOptions-defaults {:uninterpreted-option []})

(defn cis->ExtensionRangeOptions
  "CodedInputStream to ExtensionRangeOptions"
  [is]
  (->> (tag-map ExtensionRangeOptions-defaults
                (fn [tag index]
                  (case index
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->ExtensionRangeOptions)))

(defn ecis->ExtensionRangeOptions
  "Embedded CodedInputStream to ExtensionRangeOptions"
  [is]
  (cis->embedded cis->ExtensionRangeOptions is))

(defn new-ExtensionRangeOptions
  "Creates a new instance from a map, similar to map->ExtensionRangeOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ExtensionRangeOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ExtensionRangeOptions-spec init))))]}
  (-> (merge ExtensionRangeOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->ExtensionRangeOptions)))

(defn pb->ExtensionRangeOptions
  "Protobuf to ExtensionRangeOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->ExtensionRangeOptions))

;-----------------------------------------------------------------------------
; DescriptorProto
;-----------------------------------------------------------------------------
(defrecord DescriptorProto [reserved-range enum-type reserved-name extension-range name extension field options oneof-decl nested-type]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 9 (:reserved-range this) os)
    (write-repeated write-embedded 4 (:enum-type this) os)
    (write-repeated write-String 10 (:reserved-name this) os)
    (write-repeated write-embedded 5 (:extension-range this) os)
    (write-String 1  {:optimize true} (:name this) os)
    (write-repeated write-embedded 6 (:extension this) os)
    (write-repeated write-embedded 2 (:field this) os)
    (write-embedded 7 (:options this) os)
    (write-repeated write-embedded 8 (:oneof-decl this) os)
    (write-repeated write-embedded 3 (:nested-type this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 9 (:reserved-range this))
               (size-repeated size-embedded 4 (:enum-type this))
               (size-repeated size-String 10 (:reserved-name this))
               (size-repeated size-embedded 5 (:extension-range this))
               (size-String 1  {:optimize true} (:name this))
               (size-repeated size-embedded 6 (:extension this))
               (size-repeated size-embedded 2 (:field this))
               (size-embedded 7 (:options this))
               (size-repeated size-embedded 8 (:oneof-decl this))
               (size-repeated size-embedded 3 (:nested-type this))])))

(s/def :com.google.protobuf.messages.DescriptorProto/reserved-name (s/every string?))

(s/def :com.google.protobuf.messages.DescriptorProto/name string?)

(s/def ::DescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.DescriptorProto/reserved-name :com.google.protobuf.messages.DescriptorProto/name]))
(def DescriptorProto-defaults {:reserved-range [] :enum-type [] :reserved-name [] :extension-range [] :name "" :extension [] :field [] :oneof-decl [] :nested-type []})

(defn cis->DescriptorProto
  "CodedInputStream to DescriptorProto"
  [is]
  (->> (tag-map DescriptorProto-defaults
                (fn [tag index]
                  (case index
                    9 [:reserved-range (cis->repeated ecis->DescriptorProto-ReservedRange is)]
                    4 [:enum-type (cis->repeated ecis->EnumDescriptorProto is)]
                    10 [:reserved-name (cis->repeated cis->String is)]
                    5 [:extension-range (cis->repeated ecis->DescriptorProto-ExtensionRange is)]
                    1 [:name (cis->String is)]
                    6 [:extension (cis->repeated ecis->FieldDescriptorProto is)]
                    2 [:field (cis->repeated ecis->FieldDescriptorProto is)]
                    7 [:options (ecis->MessageOptions is)]
                    8 [:oneof-decl (cis->repeated ecis->OneofDescriptorProto is)]
                    3 [:nested-type (cis->repeated ecis->DescriptorProto is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->DescriptorProto)))

(defn ecis->DescriptorProto
  "Embedded CodedInputStream to DescriptorProto"
  [is]
  (cis->embedded cis->DescriptorProto is))

(defn new-DescriptorProto
  "Creates a new instance from a map, similar to map->DescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-spec init))))]}
  (-> (merge DescriptorProto-defaults init)
      (cond-> (contains? init :field) (update :field #(map new-FieldDescriptorProto %)))
      (cond-> (contains? init :extension) (update :extension #(map new-FieldDescriptorProto %)))
      (cond-> (contains? init :nested-type) (update :nested-type #(map new-DescriptorProto %)))
      (cond-> (contains? init :enum-type) (update :enum-type #(map new-EnumDescriptorProto %)))
      (cond-> (contains? init :extension-range) (update :extension-range #(map new-DescriptorProto-ExtensionRange %)))
      (cond-> (contains? init :oneof-decl) (update :oneof-decl #(map new-OneofDescriptorProto %)))
      (cond-> (contains? init :options) (update :options new-MessageOptions))
      (cond-> (contains? init :reserved-range) (update :reserved-range #(map new-DescriptorProto-ReservedRange %)))
      (map->DescriptorProto)))

(defn pb->DescriptorProto
  "Protobuf to DescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->DescriptorProto))

;-----------------------------------------------------------------------------
; OneofOptions
;-----------------------------------------------------------------------------
(defrecord OneofOptions [uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def ::OneofOptions-spec (s/keys :opt-un []))
(def OneofOptions-defaults {:uninterpreted-option []})

(defn cis->OneofOptions
  "CodedInputStream to OneofOptions"
  [is]
  (->> (tag-map OneofOptions-defaults
                (fn [tag index]
                  (case index
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->OneofOptions)))

(defn ecis->OneofOptions
  "Embedded CodedInputStream to OneofOptions"
  [is]
  (cis->embedded cis->OneofOptions is))

(defn new-OneofOptions
  "Creates a new instance from a map, similar to map->OneofOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::OneofOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::OneofOptions-spec init))))]}
  (-> (merge OneofOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->OneofOptions)))

(defn pb->OneofOptions
  "Protobuf to OneofOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->OneofOptions))

;-----------------------------------------------------------------------------
; MethodDescriptorProto
;-----------------------------------------------------------------------------
(defrecord MethodDescriptorProto [name input-type output-type options client-streaming server-streaming]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-String 2  {:optimize true} (:input-type this) os)
    (write-String 3  {:optimize true} (:output-type this) os)
    (write-embedded 4 (:options this) os)
    (write-Bool 5  {:optimize true} (:client-streaming this) os)
    (write-Bool 6  {:optimize true} (:server-streaming this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name this))
               (size-String 2  {:optimize true} (:input-type this))
               (size-String 3  {:optimize true} (:output-type this))
               (size-embedded 4 (:options this))
               (size-Bool 5  {:optimize true} (:client-streaming this))
               (size-Bool 6  {:optimize true} (:server-streaming this))])))

(s/def :com.google.protobuf.messages.MethodDescriptorProto/name string?)
(s/def :com.google.protobuf.messages.MethodDescriptorProto/input-type string?)
(s/def :com.google.protobuf.messages.MethodDescriptorProto/output-type string?)

(s/def :com.google.protobuf.messages.MethodDescriptorProto/client-streaming boolean?)
(s/def :com.google.protobuf.messages.MethodDescriptorProto/server-streaming boolean?)
(s/def ::MethodDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.MethodDescriptorProto/name :com.google.protobuf.messages.MethodDescriptorProto/input-type :com.google.protobuf.messages.MethodDescriptorProto/output-type :com.google.protobuf.messages.MethodDescriptorProto/client-streaming :com.google.protobuf.messages.MethodDescriptorProto/server-streaming]))
(def MethodDescriptorProto-defaults {:name "" :input-type "" :output-type "" :client-streaming false :server-streaming false})

(defn cis->MethodDescriptorProto
  "CodedInputStream to MethodDescriptorProto"
  [is]
  (->> (tag-map MethodDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:input-type (cis->String is)]
                    3 [:output-type (cis->String is)]
                    4 [:options (ecis->MethodOptions is)]
                    5 [:client-streaming (cis->Bool is)]
                    6 [:server-streaming (cis->Bool is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->MethodDescriptorProto)))

(defn ecis->MethodDescriptorProto
  "Embedded CodedInputStream to MethodDescriptorProto"
  [is]
  (cis->embedded cis->MethodDescriptorProto is))

(defn new-MethodDescriptorProto
  "Creates a new instance from a map, similar to map->MethodDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::MethodDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::MethodDescriptorProto-spec init))))]}
  (-> (merge MethodDescriptorProto-defaults init)
      (cond-> (contains? init :options) (update :options new-MethodOptions))
      (map->MethodDescriptorProto)))

(defn pb->MethodDescriptorProto
  "Protobuf to MethodDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->MethodDescriptorProto))

;-----------------------------------------------------------------------------
; OneofDescriptorProto
;-----------------------------------------------------------------------------
(defrecord OneofDescriptorProto [name options]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-embedded 2 (:options this) os))

  (length [this]
    (reduce + [(size-String 1  {:optimize true} (:name this))
               (size-embedded 2 (:options this))])))

(s/def :com.google.protobuf.messages.OneofDescriptorProto/name string?)

(s/def ::OneofDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.OneofDescriptorProto/name]))
(def OneofDescriptorProto-defaults {:name ""})

(defn cis->OneofDescriptorProto
  "CodedInputStream to OneofDescriptorProto"
  [is]
  (->> (tag-map OneofDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:options (ecis->OneofOptions is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->OneofDescriptorProto)))

(defn ecis->OneofDescriptorProto
  "Embedded CodedInputStream to OneofDescriptorProto"
  [is]
  (cis->embedded cis->OneofDescriptorProto is))

(defn new-OneofDescriptorProto
  "Creates a new instance from a map, similar to map->OneofDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::OneofDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::OneofDescriptorProto-spec init))))]}
  (-> (merge OneofDescriptorProto-defaults init)
      (cond-> (contains? init :options) (update :options new-OneofOptions))
      (map->OneofDescriptorProto)))

(defn pb->OneofDescriptorProto
  "Protobuf to OneofDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->OneofDescriptorProto))

;-----------------------------------------------------------------------------
; FileDescriptorProto
;-----------------------------------------------------------------------------
(defrecord FileDescriptorProto [package message-type source-code-info enum-type name extension dependency syntax weak-dependency public-dependency service options]
  pb/Writer

  (serialize [this os]
    (write-String 2  {:optimize true} (:package this) os)
    (write-repeated write-embedded 4 (:message-type this) os)
    (write-embedded 9 (:source-code-info this) os)
    (write-repeated write-embedded 5 (:enum-type this) os)
    (write-String 1  {:optimize true} (:name this) os)
    (write-repeated write-embedded 7 (:extension this) os)
    (write-repeated write-String 3 (:dependency this) os)
    (write-String 12  {:optimize true} (:syntax this) os)
    (write-repeated write-Int32 11 (:weak-dependency this) os)
    (write-repeated write-Int32 10 (:public-dependency this) os)
    (write-repeated write-embedded 6 (:service this) os)
    (write-embedded 8 (:options this) os))

  (length [this]
    (reduce + [(size-String 2  {:optimize true} (:package this))
               (size-repeated size-embedded 4 (:message-type this))
               (size-embedded 9 (:source-code-info this))
               (size-repeated size-embedded 5 (:enum-type this))
               (size-String 1  {:optimize true} (:name this))
               (size-repeated size-embedded 7 (:extension this))
               (size-repeated size-String 3 (:dependency this))
               (size-String 12  {:optimize true} (:syntax this))
               (size-repeated size-Int32 11 (:weak-dependency this))
               (size-repeated size-Int32 10 (:public-dependency this))
               (size-repeated size-embedded 6 (:service this))
               (size-embedded 8 (:options this))])))

(s/def :com.google.protobuf.messages.FileDescriptorProto/package string?)

(s/def :com.google.protobuf.messages.FileDescriptorProto/name string?)

(s/def :com.google.protobuf.messages.FileDescriptorProto/dependency (s/every string?))
(s/def :com.google.protobuf.messages.FileDescriptorProto/syntax string?)
(s/def :com.google.protobuf.messages.FileDescriptorProto/weak-dependency (s/every int?))
(s/def :com.google.protobuf.messages.FileDescriptorProto/public-dependency (s/every int?))

(s/def ::FileDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.FileDescriptorProto/package :com.google.protobuf.messages.FileDescriptorProto/name :com.google.protobuf.messages.FileDescriptorProto/dependency :com.google.protobuf.messages.FileDescriptorProto/syntax :com.google.protobuf.messages.FileDescriptorProto/weak-dependency :com.google.protobuf.messages.FileDescriptorProto/public-dependency]))
(def FileDescriptorProto-defaults {:package "" :message-type [] :enum-type [] :name "" :extension [] :dependency [] :syntax "" :weak-dependency [] :public-dependency [] :service []})

(defn cis->FileDescriptorProto
  "CodedInputStream to FileDescriptorProto"
  [is]
  (->> (tag-map FileDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    2 [:package (cis->String is)]
                    4 [:message-type (cis->repeated ecis->DescriptorProto is)]
                    9 [:source-code-info (ecis->SourceCodeInfo is)]
                    5 [:enum-type (cis->repeated ecis->EnumDescriptorProto is)]
                    1 [:name (cis->String is)]
                    7 [:extension (cis->repeated ecis->FieldDescriptorProto is)]
                    3 [:dependency (cis->repeated cis->String is)]
                    12 [:syntax (cis->String is)]
                    11 [:weak-dependency (cis->packablerepeated tag cis->Int32 is)]
                    10 [:public-dependency (cis->packablerepeated tag cis->Int32 is)]
                    6 [:service (cis->repeated ecis->ServiceDescriptorProto is)]
                    8 [:options (ecis->FileOptions is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->FileDescriptorProto)))

(defn ecis->FileDescriptorProto
  "Embedded CodedInputStream to FileDescriptorProto"
  [is]
  (cis->embedded cis->FileDescriptorProto is))

(defn new-FileDescriptorProto
  "Creates a new instance from a map, similar to map->FileDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileDescriptorProto-spec init))))]}
  (-> (merge FileDescriptorProto-defaults init)
      (cond-> (contains? init :message-type) (update :message-type #(map new-DescriptorProto %)))
      (cond-> (contains? init :enum-type) (update :enum-type #(map new-EnumDescriptorProto %)))
      (cond-> (contains? init :service) (update :service #(map new-ServiceDescriptorProto %)))
      (cond-> (contains? init :extension) (update :extension #(map new-FieldDescriptorProto %)))
      (cond-> (contains? init :options) (update :options new-FileOptions))
      (cond-> (contains? init :source-code-info) (update :source-code-info new-SourceCodeInfo))
      (map->FileDescriptorProto)))

(defn pb->FileDescriptorProto
  "Protobuf to FileDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->FileDescriptorProto))

;-----------------------------------------------------------------------------
; DescriptorProto-ReservedRange
;-----------------------------------------------------------------------------
(defrecord DescriptorProto-ReservedRange [start end]
  pb/Writer

  (serialize [this os]
    (write-Int32 1  {:optimize true} (:start this) os)
    (write-Int32 2  {:optimize true} (:end this) os))

  (length [this]
    (reduce + [(size-Int32 1  {:optimize true} (:start this))
               (size-Int32 2  {:optimize true} (:end this))])))

(s/def :com.google.protobuf.messages.DescriptorProto-ReservedRange/start int?)
(s/def :com.google.protobuf.messages.DescriptorProto-ReservedRange/end int?)
(s/def ::DescriptorProto-ReservedRange-spec (s/keys :opt-un [:com.google.protobuf.messages.DescriptorProto-ReservedRange/start :com.google.protobuf.messages.DescriptorProto-ReservedRange/end]))
(def DescriptorProto-ReservedRange-defaults {:start 0 :end 0})

(defn cis->DescriptorProto-ReservedRange
  "CodedInputStream to DescriptorProto-ReservedRange"
  [is]
  (->> (tag-map DescriptorProto-ReservedRange-defaults
                (fn [tag index]
                  (case index
                    1 [:start (cis->Int32 is)]
                    2 [:end (cis->Int32 is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->DescriptorProto-ReservedRange)))

(defn ecis->DescriptorProto-ReservedRange
  "Embedded CodedInputStream to DescriptorProto-ReservedRange"
  [is]
  (cis->embedded cis->DescriptorProto-ReservedRange is))

(defn new-DescriptorProto-ReservedRange
  "Creates a new instance from a map, similar to map->DescriptorProto-ReservedRange except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::DescriptorProto-ReservedRange-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::DescriptorProto-ReservedRange-spec init))))]}
  (-> (merge DescriptorProto-ReservedRange-defaults init)
      (map->DescriptorProto-ReservedRange)))

(defn pb->DescriptorProto-ReservedRange
  "Protobuf to DescriptorProto-ReservedRange"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->DescriptorProto-ReservedRange))

;-----------------------------------------------------------------------------
; EnumValueOptions
;-----------------------------------------------------------------------------
(defrecord EnumValueOptions [deprecated uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-Bool 1  {:optimize true} (:deprecated this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-Bool 1  {:optimize true} (:deprecated this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.EnumValueOptions/deprecated boolean?)

(s/def ::EnumValueOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.EnumValueOptions/deprecated]))
(def EnumValueOptions-defaults {:deprecated false :uninterpreted-option []})

(defn cis->EnumValueOptions
  "CodedInputStream to EnumValueOptions"
  [is]
  (->> (tag-map EnumValueOptions-defaults
                (fn [tag index]
                  (case index
                    1 [:deprecated (cis->Bool is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->EnumValueOptions)))

(defn ecis->EnumValueOptions
  "Embedded CodedInputStream to EnumValueOptions"
  [is]
  (cis->embedded cis->EnumValueOptions is))

(defn new-EnumValueOptions
  "Creates a new instance from a map, similar to map->EnumValueOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EnumValueOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EnumValueOptions-spec init))))]}
  (-> (merge EnumValueOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->EnumValueOptions)))

(defn pb->EnumValueOptions
  "Protobuf to EnumValueOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->EnumValueOptions))

;-----------------------------------------------------------------------------
; FieldDescriptorProto
;-----------------------------------------------------------------------------
(defrecord FieldDescriptorProto [label json-name name oneof-index number type-name type options extendee default-value]
  pb/Writer

  (serialize [this os]
    (write-FieldDescriptorProto-Label 4  {:optimize true} (:label this) os)
    (write-String 10  {:optimize true} (:json-name this) os)
    (write-String 1  {:optimize true} (:name this) os)
    (write-Int32 9  {:optimize true} (:oneof-index this) os)
    (write-Int32 3  {:optimize true} (:number this) os)
    (write-String 6  {:optimize true} (:type-name this) os)
    (write-FieldDescriptorProto-Type 5  {:optimize true} (:type this) os)
    (write-embedded 8 (:options this) os)
    (write-String 2  {:optimize true} (:extendee this) os)
    (write-String 7  {:optimize true} (:default-value this) os))

  (length [this]
    (reduce + [(size-FieldDescriptorProto-Label 4  {:optimize true} (:label this))
               (size-String 10  {:optimize true} (:json-name this))
               (size-String 1  {:optimize true} (:name this))
               (size-Int32 9  {:optimize true} (:oneof-index this))
               (size-Int32 3  {:optimize true} (:number this))
               (size-String 6  {:optimize true} (:type-name this))
               (size-FieldDescriptorProto-Type 5  {:optimize true} (:type this))
               (size-embedded 8 (:options this))
               (size-String 2  {:optimize true} (:extendee this))
               (size-String 7  {:optimize true} (:default-value this))])))

(s/def :com.google.protobuf.messages.FieldDescriptorProto/label (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.messages.FieldDescriptorProto/json-name string?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/name string?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/oneof-index int?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/number int?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/type-name string?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/type (s/or :keyword keyword? :int int?))

(s/def :com.google.protobuf.messages.FieldDescriptorProto/extendee string?)
(s/def :com.google.protobuf.messages.FieldDescriptorProto/default-value string?)
(s/def ::FieldDescriptorProto-spec (s/keys :opt-un [:com.google.protobuf.messages.FieldDescriptorProto/label :com.google.protobuf.messages.FieldDescriptorProto/json-name :com.google.protobuf.messages.FieldDescriptorProto/name :com.google.protobuf.messages.FieldDescriptorProto/oneof-index :com.google.protobuf.messages.FieldDescriptorProto/number :com.google.protobuf.messages.FieldDescriptorProto/type-name :com.google.protobuf.messages.FieldDescriptorProto/type :com.google.protobuf.messages.FieldDescriptorProto/extendee :com.google.protobuf.messages.FieldDescriptorProto/default-value]))
(def FieldDescriptorProto-defaults {:label (FieldDescriptorProto-Label-val2label 0) :json-name "" :name "" :number 0 :type-name "" :type (FieldDescriptorProto-Type-val2label 0) :extendee "" :default-value ""})

(defn cis->FieldDescriptorProto
  "CodedInputStream to FieldDescriptorProto"
  [is]
  (->> (tag-map FieldDescriptorProto-defaults
                (fn [tag index]
                  (case index
                    4 [:label (cis->FieldDescriptorProto-Label is)]
                    10 [:json-name (cis->String is)]
                    1 [:name (cis->String is)]
                    9 [:oneof-index (cis->Int32 is)]
                    3 [:number (cis->Int32 is)]
                    6 [:type-name (cis->String is)]
                    5 [:type (cis->FieldDescriptorProto-Type is)]
                    8 [:options (ecis->FieldOptions is)]
                    2 [:extendee (cis->String is)]
                    7 [:default-value (cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->FieldDescriptorProto)))

(defn ecis->FieldDescriptorProto
  "Embedded CodedInputStream to FieldDescriptorProto"
  [is]
  (cis->embedded cis->FieldDescriptorProto is))

(defn new-FieldDescriptorProto
  "Creates a new instance from a map, similar to map->FieldDescriptorProto except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldDescriptorProto-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldDescriptorProto-spec init))))]}
  (-> (merge FieldDescriptorProto-defaults init)
      (cond-> (contains? init :options) (update :options new-FieldOptions))
      (map->FieldDescriptorProto)))

(defn pb->FieldDescriptorProto
  "Protobuf to FieldDescriptorProto"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->FieldDescriptorProto))

;-----------------------------------------------------------------------------
; GeneratedCodeInfo
;-----------------------------------------------------------------------------
(defrecord GeneratedCodeInfo [annotation]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 1 (:annotation this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 1 (:annotation this))])))

(s/def ::GeneratedCodeInfo-spec (s/keys :opt-un []))
(def GeneratedCodeInfo-defaults {:annotation []})

(defn cis->GeneratedCodeInfo
  "CodedInputStream to GeneratedCodeInfo"
  [is]
  (->> (tag-map GeneratedCodeInfo-defaults
                (fn [tag index]
                  (case index
                    1 [:annotation (cis->repeated ecis->GeneratedCodeInfo-Annotation is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->GeneratedCodeInfo)))

(defn ecis->GeneratedCodeInfo
  "Embedded CodedInputStream to GeneratedCodeInfo"
  [is]
  (cis->embedded cis->GeneratedCodeInfo is))

(defn new-GeneratedCodeInfo
  "Creates a new instance from a map, similar to map->GeneratedCodeInfo except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GeneratedCodeInfo-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GeneratedCodeInfo-spec init))))]}
  (-> (merge GeneratedCodeInfo-defaults init)
      (cond-> (contains? init :annotation) (update :annotation #(map new-GeneratedCodeInfo-Annotation %)))
      (map->GeneratedCodeInfo)))

(defn pb->GeneratedCodeInfo
  "Protobuf to GeneratedCodeInfo"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->GeneratedCodeInfo))

;-----------------------------------------------------------------------------
; FileOptions
;-----------------------------------------------------------------------------
(defrecord FileOptions [php-class-prefix java-generic-services java-outer-classname java-multiple-files php-generic-services php-namespace go-package optimize-for java-string-check-utf8 ruby-package java-package csharp-namespace uninterpreted-option php-metadata-namespace deprecated swift-prefix java-generate-equals-and-hash cc-enable-arenas py-generic-services cc-generic-services objc-class-prefix]
  pb/Writer

  (serialize [this os]
    (write-String 40  {:optimize true} (:php-class-prefix this) os)
    (write-Bool 17  {:optimize true} (:java-generic-services this) os)
    (write-String 8  {:optimize true} (:java-outer-classname this) os)
    (write-Bool 10  {:optimize true} (:java-multiple-files this) os)
    (write-Bool 42  {:optimize true} (:php-generic-services this) os)
    (write-String 41  {:optimize true} (:php-namespace this) os)
    (write-String 11  {:optimize true} (:go-package this) os)
    (write-FileOptions-OptimizeMode 9  {:optimize true} (:optimize-for this) os)
    (write-Bool 27  {:optimize true} (:java-string-check-utf8 this) os)
    (write-String 45  {:optimize true} (:ruby-package this) os)
    (write-String 1  {:optimize true} (:java-package this) os)
    (write-String 37  {:optimize true} (:csharp-namespace this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os)
    (write-String 44  {:optimize true} (:php-metadata-namespace this) os)
    (write-Bool 23  {:optimize true} (:deprecated this) os)
    (write-String 39  {:optimize true} (:swift-prefix this) os)
    (write-Bool 20  {:optimize true} (:java-generate-equals-and-hash this) os)
    (write-Bool 31  {:optimize true} (:cc-enable-arenas this) os)
    (write-Bool 18  {:optimize true} (:py-generic-services this) os)
    (write-Bool 16  {:optimize true} (:cc-generic-services this) os)
    (write-String 36  {:optimize true} (:objc-class-prefix this) os))

  (length [this]
    (reduce + [(size-String 40  {:optimize true} (:php-class-prefix this))
               (size-Bool 17  {:optimize true} (:java-generic-services this))
               (size-String 8  {:optimize true} (:java-outer-classname this))
               (size-Bool 10  {:optimize true} (:java-multiple-files this))
               (size-Bool 42  {:optimize true} (:php-generic-services this))
               (size-String 41  {:optimize true} (:php-namespace this))
               (size-String 11  {:optimize true} (:go-package this))
               (size-FileOptions-OptimizeMode 9  {:optimize true} (:optimize-for this))
               (size-Bool 27  {:optimize true} (:java-string-check-utf8 this))
               (size-String 45  {:optimize true} (:ruby-package this))
               (size-String 1  {:optimize true} (:java-package this))
               (size-String 37  {:optimize true} (:csharp-namespace this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))
               (size-String 44  {:optimize true} (:php-metadata-namespace this))
               (size-Bool 23  {:optimize true} (:deprecated this))
               (size-String 39  {:optimize true} (:swift-prefix this))
               (size-Bool 20  {:optimize true} (:java-generate-equals-and-hash this))
               (size-Bool 31  {:optimize true} (:cc-enable-arenas this))
               (size-Bool 18  {:optimize true} (:py-generic-services this))
               (size-Bool 16  {:optimize true} (:cc-generic-services this))
               (size-String 36  {:optimize true} (:objc-class-prefix this))])))

(s/def :com.google.protobuf.messages.FileOptions/php-class-prefix string?)
(s/def :com.google.protobuf.messages.FileOptions/java-generic-services boolean?)
(s/def :com.google.protobuf.messages.FileOptions/java-outer-classname string?)
(s/def :com.google.protobuf.messages.FileOptions/java-multiple-files boolean?)
(s/def :com.google.protobuf.messages.FileOptions/php-generic-services boolean?)
(s/def :com.google.protobuf.messages.FileOptions/php-namespace string?)
(s/def :com.google.protobuf.messages.FileOptions/go-package string?)
(s/def :com.google.protobuf.messages.FileOptions/optimize-for (s/or :keyword keyword? :int int?))
(s/def :com.google.protobuf.messages.FileOptions/java-string-check-utf8 boolean?)
(s/def :com.google.protobuf.messages.FileOptions/ruby-package string?)
(s/def :com.google.protobuf.messages.FileOptions/java-package string?)
(s/def :com.google.protobuf.messages.FileOptions/csharp-namespace string?)

(s/def :com.google.protobuf.messages.FileOptions/php-metadata-namespace string?)
(s/def :com.google.protobuf.messages.FileOptions/deprecated boolean?)
(s/def :com.google.protobuf.messages.FileOptions/swift-prefix string?)
(s/def :com.google.protobuf.messages.FileOptions/java-generate-equals-and-hash boolean?)
(s/def :com.google.protobuf.messages.FileOptions/cc-enable-arenas boolean?)
(s/def :com.google.protobuf.messages.FileOptions/py-generic-services boolean?)
(s/def :com.google.protobuf.messages.FileOptions/cc-generic-services boolean?)
(s/def :com.google.protobuf.messages.FileOptions/objc-class-prefix string?)
(s/def ::FileOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.FileOptions/php-class-prefix :com.google.protobuf.messages.FileOptions/java-generic-services :com.google.protobuf.messages.FileOptions/java-outer-classname :com.google.protobuf.messages.FileOptions/java-multiple-files :com.google.protobuf.messages.FileOptions/php-generic-services :com.google.protobuf.messages.FileOptions/php-namespace :com.google.protobuf.messages.FileOptions/go-package :com.google.protobuf.messages.FileOptions/optimize-for :com.google.protobuf.messages.FileOptions/java-string-check-utf8 :com.google.protobuf.messages.FileOptions/ruby-package :com.google.protobuf.messages.FileOptions/java-package :com.google.protobuf.messages.FileOptions/csharp-namespace :com.google.protobuf.messages.FileOptions/php-metadata-namespace :com.google.protobuf.messages.FileOptions/deprecated :com.google.protobuf.messages.FileOptions/swift-prefix :com.google.protobuf.messages.FileOptions/java-generate-equals-and-hash :com.google.protobuf.messages.FileOptions/cc-enable-arenas :com.google.protobuf.messages.FileOptions/py-generic-services :com.google.protobuf.messages.FileOptions/cc-generic-services :com.google.protobuf.messages.FileOptions/objc-class-prefix]))
(def FileOptions-defaults {:php-class-prefix "" :java-generic-services false :java-outer-classname "" :java-multiple-files false :php-generic-services false :php-namespace "" :go-package "" :optimize-for (FileOptions-OptimizeMode-val2label 0) :java-string-check-utf8 false :ruby-package "" :java-package "" :csharp-namespace "" :uninterpreted-option [] :php-metadata-namespace "" :deprecated false :swift-prefix "" :java-generate-equals-and-hash false :cc-enable-arenas false :py-generic-services false :cc-generic-services false :objc-class-prefix ""})

(defn cis->FileOptions
  "CodedInputStream to FileOptions"
  [is]
  (->> (tag-map FileOptions-defaults
                (fn [tag index]
                  (case index
                    40 [:php-class-prefix (cis->String is)]
                    17 [:java-generic-services (cis->Bool is)]
                    8 [:java-outer-classname (cis->String is)]
                    10 [:java-multiple-files (cis->Bool is)]
                    42 [:php-generic-services (cis->Bool is)]
                    41 [:php-namespace (cis->String is)]
                    11 [:go-package (cis->String is)]
                    9 [:optimize-for (cis->FileOptions-OptimizeMode is)]
                    27 [:java-string-check-utf8 (cis->Bool is)]
                    45 [:ruby-package (cis->String is)]
                    1 [:java-package (cis->String is)]
                    37 [:csharp-namespace (cis->String is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]
                    44 [:php-metadata-namespace (cis->String is)]
                    23 [:deprecated (cis->Bool is)]
                    39 [:swift-prefix (cis->String is)]
                    20 [:java-generate-equals-and-hash (cis->Bool is)]
                    31 [:cc-enable-arenas (cis->Bool is)]
                    18 [:py-generic-services (cis->Bool is)]
                    16 [:cc-generic-services (cis->Bool is)]
                    36 [:objc-class-prefix (cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->FileOptions)))

(defn ecis->FileOptions
  "Embedded CodedInputStream to FileOptions"
  [is]
  (cis->embedded cis->FileOptions is))

(defn new-FileOptions
  "Creates a new instance from a map, similar to map->FileOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FileOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FileOptions-spec init))))]}
  (-> (merge FileOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->FileOptions)))

(defn pb->FileOptions
  "Protobuf to FileOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->FileOptions))

;-----------------------------------------------------------------------------
; SourceCodeInfo
;-----------------------------------------------------------------------------
(defrecord SourceCodeInfo [location]
  pb/Writer

  (serialize [this os]
    (write-repeated write-embedded 1 (:location this) os))

  (length [this]
    (reduce + [(size-repeated size-embedded 1 (:location this))])))

(s/def ::SourceCodeInfo-spec (s/keys :opt-un []))
(def SourceCodeInfo-defaults {:location []})

(defn cis->SourceCodeInfo
  "CodedInputStream to SourceCodeInfo"
  [is]
  (->> (tag-map SourceCodeInfo-defaults
                (fn [tag index]
                  (case index
                    1 [:location (cis->repeated ecis->SourceCodeInfo-Location is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->SourceCodeInfo)))

(defn ecis->SourceCodeInfo
  "Embedded CodedInputStream to SourceCodeInfo"
  [is]
  (cis->embedded cis->SourceCodeInfo is))

(defn new-SourceCodeInfo
  "Creates a new instance from a map, similar to map->SourceCodeInfo except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SourceCodeInfo-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SourceCodeInfo-spec init))))]}
  (-> (merge SourceCodeInfo-defaults init)
      (cond-> (contains? init :location) (update :location #(map new-SourceCodeInfo-Location %)))
      (map->SourceCodeInfo)))

(defn pb->SourceCodeInfo
  "Protobuf to SourceCodeInfo"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->SourceCodeInfo))

;-----------------------------------------------------------------------------
; ServiceOptions
;-----------------------------------------------------------------------------
(defrecord ServiceOptions [deprecated uninterpreted-option]
  pb/Writer

  (serialize [this os]
    (write-Bool 33  {:optimize true} (:deprecated this) os)
    (write-repeated write-embedded 999 (:uninterpreted-option this) os))

  (length [this]
    (reduce + [(size-Bool 33  {:optimize true} (:deprecated this))
               (size-repeated size-embedded 999 (:uninterpreted-option this))])))

(s/def :com.google.protobuf.messages.ServiceOptions/deprecated boolean?)

(s/def ::ServiceOptions-spec (s/keys :opt-un [:com.google.protobuf.messages.ServiceOptions/deprecated]))
(def ServiceOptions-defaults {:deprecated false :uninterpreted-option []})

(defn cis->ServiceOptions
  "CodedInputStream to ServiceOptions"
  [is]
  (->> (tag-map ServiceOptions-defaults
                (fn [tag index]
                  (case index
                    33 [:deprecated (cis->Bool is)]
                    999 [:uninterpreted-option (cis->repeated ecis->UninterpretedOption is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->ServiceOptions)))

(defn ecis->ServiceOptions
  "Embedded CodedInputStream to ServiceOptions"
  [is]
  (cis->embedded cis->ServiceOptions is))

(defn new-ServiceOptions
  "Creates a new instance from a map, similar to map->ServiceOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ServiceOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ServiceOptions-spec init))))]}
  (-> (merge ServiceOptions-defaults init)
      (cond-> (contains? init :uninterpreted-option) (update :uninterpreted-option #(map new-UninterpretedOption %)))
      (map->ServiceOptions)))

(defn pb->ServiceOptions
  "Protobuf to ServiceOptions"
  [input]
  (-> input
      CodedInputStream/newInstance
      cis->ServiceOptions))

